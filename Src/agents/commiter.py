
import base64, logging, traceback
from typing import Dict, Any
from github import Github
from Src.config import GITHUB_TOKEN, DEFAULT_BRANCH, AUTO_MERGE

logger = logging.getLogger("Committer")
logging.basicConfig(level=logging.INFO)

gh = Github(GITHUB_TOKEN) if GITHUB_TOKEN else None

def create_readme_pr(owner: str, repo_name: str, pr_number: int, readme_md: str) -> Dict[str, Any]:
    if not gh:
        return {"error": "GITHUB_TOKEN not configured"}
    try:
        repo = gh.get_repo(f"{owner}/{repo_name}")
        base = repo.get_branch(DEFAULT_BRANCH)

        branch_name = f"auto-docs/pr-{pr_number}"
        # create branch from default branch
        try:
            repo.create_git_ref(ref=f"refs/heads/{branch_name}", sha=base.commit.sha)
            logger.info("Committer: created branch %s", branch_name)
        except Exception:
            logger.info("Committer: branch %s may already exist; continuing", branch_name)

        # update or create README.md on the new branch
        try:
            readme = repo.get_contents("README.md", ref=DEFAULT_BRANCH)
            current = base64.b64decode(readme.content).decode()
            updated = current + "\n\n" + readme_md
            repo.update_file(readme.path, f"docs: auto update README for PR #{pr_number}", updated, readme.sha, branch=branch_name)
            logger.info("Committer: updated README.md on branch %s", branch_name)
        except Exception:
            # create README if doesn't exist
            repo.create_file("README.md", f"docs: add README for PR #{pr_number}", readme_md, branch=branch_name)
            logger.info("Committer: created README.md on branch %s", branch_name)

        pr = repo.create_pull(title=f"Auto docs: README updates for PR #{pr_number}",
                              body="Automated README suggestions generated by AI. Please review.",
                              head=branch_name, base=DEFAULT_BRANCH, draft=True)
        try:
            pr.add_to_labels("auto-docs")
        except Exception:
            logger.debug("Committer: could not add label (it may not exist)")
        if AUTO_MERGE:
            try:
                pr.merge()
                logger.info("Committer: auto-merged PR %s", pr.number)
            except Exception as e:
                logger.warning("Committer: auto-merge failed: %s", e)
        logger.info("Committer: created draft PR %s", pr.html_url)
        return {"pr_url": pr.html_url, "pr_number": pr.number, "branch": branch_name}
    except Exception as e:
        logger.exception("Committer: failed: %s", e)
        return {"error": str(e), "trace": traceback.format_exc()}
